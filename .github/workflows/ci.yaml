name: ci-workflow

on:
  push:
  pull_request:
    branches:
      - main
      - test

jobs:
  check:
    name: 🛠️ Run Pre-commit Hooks
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - uses: pre-commit/action@v3.0.1

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.3
          virtualenvs-path: .venv
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      - name: Run tests
        run: |
          source .venv/bin/activate
          set -o allexport; source .env.example; set +o allexport
          coverage run -m pytest . -vv --color=yes
          coverage report

  build:
    name: 🐳 Build Docker image
    runs-on: ubuntu-22.04
    needs:
      - check
      - test
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/aurora-site/aurora-api
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1
        with:
          platforms: linux/amd64
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6.5.0
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-22.04
    needs: build
    environment:
      name: test
      url: https://test-aurora-api.akorz.duckdns.org
    defaults:
      run:
        working-directory: deploy/test
    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        id: vars
        run: echo "sha_short=sha-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Run playbook
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy.yaml
          directory: deploy
          configuration: |
            [defaults]
            callbacks_enabled = ansible.posix.profile_tasks, ansible.posix.timer
            stdout_callback = yaml
            interpreter_python = /usr/bin/python
            [ssh_connection]
            retries=5
          vault_password: ${{ secrets.ANSIBLE_PASS }}
          inventory: ${{ vars.ANSIBLE_HOSTS }}
          options: |
            --inventory .hosts
            --limit ${{ vars.SERVER_GROUP }}
            --verbose
            --extra-vars "
            PORT=${{ vars.PORT }}
            IGNORE_CORS=${{ vars.IGNORE_CORS }}
            OW_API_KEY=${{ vars.OW_API_KEY }}
            ALLOWED_ORIGINS=${{ vars.ALLOWED_ORIGINS }}
            IMAGE_TAG=${{ steps.vars.outputs.sha_short }}
            ENV_NAME=test
            "
